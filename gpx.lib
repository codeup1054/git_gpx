<?php

$time_start = $time_lap =  microtime(true);

$ranges = array(
'0rgb(200,  0,  0)'=>60*30,
'1rgb(255, 90, 20)'=>3600*6,
'2rgb(250,225, 10)'=>3600*24,
'3rgb(100,230, 10)'=>3600*24*2,
'4rgb( 30,180, 15)'=>3600*24*3,
'5rgb( 80,190,155)'=>3600*24*4,
'6rgb( 80,180,230)'=>3600*24*5,
'7rgb( 100,120,230)'=>3600*24*6,
'8rgb( 170,190,210)'=>3600*24*7,
'9rgb( 210,220,230)'=>3600*24*365
);



function jq_header()
{
    echo '<html>
<head>                                                               
<!--    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=true"></script> 
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCqtLzdiGvGIu85wF1C7w4UKdUncnwgF0M&callback=initMap">
    </script>
    -->
    <link href="/gpx/gpx.css" rel="stylesheet" type="text/css" />
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script type="text/javascript" src="js/cookie/jquery.cookie.js"></script>
    <script type="text/javascript" src="js/google_sheets_api.js"></script>
<!-- chart and elevation 
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
    <script src="https://www.google.com/uds/?file=visualization&amp;v=1&amp;packages=columnchart" type="text/javascript"></script>
-->     
    <script src="js/gpx.js"></script> 
</head>';
} 





class gpxSQL extends MySQLi
{
   public function groupsIntervals($ranges)
    {
        $case_groups = "";
        $ov = 0;
        $max_cnt = 0;

        foreach($ranges as $k=>$v)
        {
             $case_groups .= " when (UNIX_TIMESTAMP()-d) between $ov and $v then '$k'";
             $ov = $v+1; 
        }
        
        
        
        $sz = count($ranges)+1; 
        
        $sql_select_group = "select count(*) as cnt, sum(t.s) as s, t.z as z, t.rng as rng from 
        (select z, s, d, case    
            $case_groups   
            else 'more'   
            end as rng  
          from strava_cache) t where (UNIX_TIMESTAMP()-d) < $ov
        group by t.z, t.rng  
        ORDER BY t.z, t.rng ASC";

//        print "case_groups = ".$sql_select_group;

        $res = array();
        if ( 1 &&
    //    !$mysqli->query("DROP TABLE IF EXISTS strava_cache") ||
    //    !$mysqli->query($sql_create_tab) ||
        $result = $this->query($sql_select_group)) {
          while($o = $result->fetch_object()){
                $max_cnt = max($o->cnt, $max_cnt); 
                $res[$o->z][$o->rng]['cnt'] = $o->cnt; 
                $res[$o->z][$o->rng]['s'] = $o->s; 
            };
            
            }
        else 
        {    
            $err = "Не удалось создать таблицу: (" . $this->errno . ") " . $this->error;
        }

//        echo "<br />*** ".$line." ***<br />";
//        print_r ($res);
        return array ('res'=>$res, 'max_cnt' => $max_cnt);
    }

    
    public function getCacheList($z,$x,$y,$depth)
    {
         
         $res = array();
         $max_x = $x + pow(2,$depth);
         $max_y = $y + pow(2,$depth);
         $z = $z;

         $q = "select * from strava_cache where 
                    z = $z and  
                    x >= $x and  
                    x <= $max_x  and  
                    y >= $y and  
                    y <= $max_y  
                    ";
         
 //        print ("@@ *** q=".$z.",".$depth."\n".$q."\n");        
                       
        if ( 1 && $result = $this->query($q)) {
          while($o = $result->fetch_object()){
//                $res[$o->z][$o->x][$o->y]['d'] = $o->d; 
//                $res[$o->z][$o->x][$o->y]['s'] = $o->s; 
//                $res[$o->x][$o->y]['d'] = $o->d; 
//                $res[$o->x][$o->y]['s'] = $o->s; 
                $res[$o->x][] = (int)$o->y; 
            };
            
            }
        else $err = "Не удалось выполнить запрос: (" . $this->errno . ") " . $this->error;
        
        
//        echo "\n******* res=\n ".print_r ($res,1);
        
        return $res; 

    }
  
}



function getTile ($zoom,$lat,$lon) {
	
	$tile['x'] = floor((($lon + 180) / 360) * pow(2, $zoom));
	$tile['y'] = floor((1 - log(tan(deg2rad($lat)) + 1 / cos(deg2rad($lat))) / pi()) /2 * pow(2, $zoom));
	return $tile;
}


function getLatLngFromZXY($z, $x, $y)
{
  $n = pow(2.0,$z);
  $res['lng'] = $x / $n * 360.0 - 180.0;
  $lat_rad = atan(sinh(pi() * (1 - 2 * $y / $n)));
  $res['lat'] = 180.0 * ($lat_rad / pi());
  return $res;
}

function getLatLng($x,$y)
{       
     $res['lat'] = (2 * atan( exp(($y - 128) / -(256 / (2 * pi())))) - pi() / 2)/ (pi() / 180);
     $res['lng'] = ($x - 128) / (256 / 360);
    
     return $res;
    
}
 


$gsql = new gpxSQL("localhost", "gpx", "9jEig00&", "gpx");

/* проверка соединения */
if ($gsql->connect_errno) {
    printf("Не удалось подключиться: %s\n", $gsql->connect_error);
    exit();
}

 
$tm_on = 0; 
 
function tm($s = '',$is_str=0)
{
    global $time_start, $time_lap, $tm_on;
    
    if (!$tm_on) return;
        
    $t  = microtime(true);
    $res = $t;

    if ($s == '') 
     { 
        $time_lap = $time_start = microtime(true);
        return;
     }
    else 
    {
    $res = sprintf("<sup><a class=red>+%0.4f</a> %0.3f %s <a class=blue>%s</a></sup><br/>", 
                ($t - $time_lap), ($t - $time_start), 
                date('M-d H:i:s', time()),
                $s
                );
                
    $res2 = sprintf("+%0.4f %0.3f %s %s\n", 
                ($t - $time_lap), ($t - $time_start), 
                date('M-d H:i:s', time()),
                $s
                );
                
    }            

    $time_lap = $t;
    
    if ($is_str) return $res2;
    else echo $res;
 
}


function gpx_cache_scan()
{

$res = array();
    
$cmd = array(
'total_cnt'=>"find ./img_cache/ -type f -exec ls -l --time-style=+%s {} + | wc -l",
'total_size_with_dir'=> "du -s -B1 ./img_cache/ | awk '{ print $1 }'"
);     

foreach($cmd as $k=>$v)
{

$io = popen ( $v, 'r' );
if ($io) 
    {
        while (($line = fgets($io, 200)) !== false) $res[$k][] = $line;
        fclose($io);
    } 
    else { print ("error opening the file."); } 
}
    

return $res;

}



?>